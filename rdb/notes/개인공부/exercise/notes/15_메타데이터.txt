15장 메타데이터

메타데이터
    데이터에 대한 데이터
    aka Data dictionary, System catalog
    데이터베이스 오브젝트를 작성할 때마다 작성
    내용
        테이블 이름
        테이블 스토리지 정보 (테이블 스페이스, 초기 크기 등)
        스토리지 엔진
        열에 대한 정보들: 열 이름, dtypes, default, not null 여부 등
        기본키 정보: 기본키 열, 이름, 기본키 인덱스 이름
        인덱스: 이름, 유형(b-tree, bitmap, ...), 인덱스 구성 열, 정렬 순서
        외래키 제약조건: 외래키 이름, 열, 외래키 근원(어느 테이블의 어느 열에서 온 것인지 ...)

    메타데이터 게시 방법
        Oracle: user_tables, all_constraints >>> 뷰 집합
        SQL Server: sp_tables 프로시저, 시스템 저장 프로시저, 특수 스키마 (information_schema)
        MySQL: 특수 데이터베이스 (대표 사례: information_schema)
        
        *** SQL Server, MySQL의 경우 ANSI SQL:2003 표준을 준수하도록 information_schema 제공
            (SQL Server의 경우 schema)



정보 스키마

    information_schema 데이터베이스 내에서 사용 가능한 모든 객체는 """ 뷰 """
        >>> information_schema 내의 객체에 대한 쿼리는 뷰를 대상으로 한 쿼리
    
    ex. sakila database의 모든 테이블 이름을 검색하는 경우
        (*** information_schema 데이터베이스에서 쿼리하는 경우 FROM 절의 information_schema. 은 제외 가능)

SELECT table_name, table_type
FROM information_schema.tables
WHERE table_schema = 'sakila'
ORDER BY 1;

    ex2. 방금 전과는 다르게 뷰는 제외할 경우

SELECT table_name, table_type
FROM information_schema.tables
WHERE table_schema = 'sakila' AND table_type = 'BASE TABLE'
ORDER BY 1;

    ex3. 뷰에 대한 정보 검색: tables 대신 views 활용

SELECT table_name, is_updatable
FROM information_schema.views
WHERE table_schema = 'sakila'
ORDER BY 1;

    ex4. columns: 데이터베이스 내 객체들의 열 정보 (film 테이블의 경우)
    
SELECT 
    column_name,
    data_type,
    character_maximum_length char_max_len,
    numeric_precision num_precs,
    numeric_scale num_scale
FROM information_schema.columns
WHERE table_schema = 'sakila' AND table_name = 'film'
ORDER BY ordinal_position;

    *** columns에서 ordinal_position은 열 간 우선 순위가 아닌, 테이블에 추가된 순서다
    
    ex5. statistics: 인덱스 정보 (rental 테이블의 경우)
    
SELECT index_name, non_unique, seq_in_index, column_name
FROM information_schema.statistics
WHERE table_schema = 'sakila' AND table_name = 'rental'
ORDER BY 1, 3;

    *** non_unique: 0 OR 1, 1일 경우 UNIQUE ( >>> 특히 PK )
    
    ex6. table_constraints: 제약조건 관련 정보
    
SELECT constraint_name, table_name, constraint_type
FROM information_schema.table_constraints
WHERE table_schema = 'sakila'
ORDER BY 3, 1;



메타데이터로 작업하기

스키마 생성 스크립트: 메타데이터를 참조하여 스크립트 작성하기

    ex. CREATE TABLE 문을 생성하는 쿼리 작성: sakila.category를 만들 경우
    
    1. information_schema.columns 테이블을 쿼리하여 테이블의 열에 대한 정보 검색

SELECT
    'CREATE TABLE category (' create_table_statement
UNION ALL
SELECT cols.txt
FROM (
    SELECT concat(
        '    ', column_name, '    ', column_type,
        CASE
            WHEN is_nullable = 'NO' THEN '    not null'
            ELSE ''
        END,
        CASE
            WHEN extra IS NOT NULL AND extra LIKE 'DEFAULT_GENERATED%'
                THEN concat('    DEFAULT    ', column_default, substr(extra, 18))
            WHEN extra IS NOT NULL 
                THEN concat('    ', extra)
            ELSE
                ''
        END,
        ', '
    ) txt
    FROM information_schema.columns
    WHERE table_schema = 'sakila' AND table_name = 'category'
    ORDER BY ordinal_position
) cols
UNION ALL
SELECT ')'
;

/*
SELECT column_name, column_default, substr(extra, 18), extra, table_name
FROM information_schema.columns
WHERE table_schema = 'sakila';
*/

    ex2. 위 쿼리에 기본 키 제약조건에 대한 사항 추가

--    ... ex에서 작성한 쿼리 (마지막 UNION ALL 까지 ) ...
SELECT concat('    constraint primary key (')
FROM information_schema.table_constraints
WHERE 
    table_schema = 'sakila' AND table_name = 'category'
    AND constraint_type = 'PRIMARY KEY'
UNION ALL
SELECT cols.txt
FROM (
    SELECT 
        concat(
            CASE WHEN ordinal_position > 1 THEN '    , ' ELSE '    '
            END,
            column_name
        ) txt
    FROM information_schema.key_column_usage
    WHERE
        table_schema = 'sakila'
        AND table_name = 'category'
        AND constraint_name = 'PRIMARY'
    ORDER BY ordinal_position
) cols
UNION ALL
SELECT '    )'
UNION ALL
SELECT ')'
;

    *** ex2)의 결과 확인
CREATE TABLE category2 (                                                                                
     category_id    tinyint unsigned    not null    auto_increment,                        
     name    varchar(25)    not null    ,                                                               
     last_update    timestamp    not null    DEFAULT    CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,  
     constraint primary key (                                                                           
     category_id                                                                                        
     )                                                                                                  
);



배포 전 새 스키마 검증

    ex. 각 테이블의 열 수, 인덱스, 기본키 제약조건 수 확인
    
SELECT tbl.table_name, (
    SELECT count(*)
    FROM information_schema.columns clm 
    WHERE
        clm.table_schema = tbl.table_schema
        AND clm.table_name = tbl.table_name
    ) num_columns, (
    SELECT count(*)
    FROM information_schema.statistics sta
    WHERE
        sta.table_schema = tbl.table_schema
        AND sta.table_name = tbl.table_name
    ) num_indexes, (
    SELECT count(*)
    FROM information_schema.table_constraints tc
    WHERE
        tc.table_schema = tbl.table_schema
        AND tc.table_name = tbl.table_name
        AND tc.constraint_type = 'PRIMARY KEY'
    ) num_primary_keys
FROM information_schema.tables tbl
WHERE tbl.table_schema = 'sakila' AND tbl.table_type = 'BASE TABLE'
ORDER BY 1;



동적 SQL 생성

*** 동적 SQL 실행: SQL 인터페이스를 사용하지 않고 데이터베이스 엔진에 문자열을 전송하는 것
    ex. mysqlsh로 직접 SQL을 입력하는 것이 아닌, 다른 곳에서 서버로 "SELECT ... FROM ..."과 같이 SQL을 작성한 문자열을 넘기는 것

    mysql의 동적 SQL 실행
        1. 실행할 SQL 문자열 준비 (SET @... = 를 쓰던가, 어디서 가져오던가)
        2. prepare 구문 이름 FROM @변수; >>> 실행 준비
        3. execute 구문 이름; >>> 실행 및 결과 표시
        4. deallocate prepare 구문 이름 >>> 구문에 할당된 리소스 해제 (커서 등)
        
    활용
    
        ex. customer에서 고객아이디, 성명 검색
        
SET @qry = 'SELECT customer_id, first_name, last_name FROM customer LIMIT 5';
PREPARE dynsql1 FROM @qry;
EXECUTE dynsql1;
DEALLOCATE PREPARE dynsql1;

    *** mysql에서의 변수 사용
        
        1. SET @변수명 = 값;
        2. SET @변수명 := 값;
        3. SELECT @변수명 := 값;
        
    *** :=? >>> SQL에서 = 는 비교 연산자로 쓰기 때문에 SET을 쓰지 않고 대입할 경우 :=를 써야 한다

    ex2. ?, using: 런타임 시 조건을 지정하여 실행할 경우
    
SET @test_quary = 'SELECT customer_id, first_name, last_name FROM customer WHERE customer_id = ?';
PREPARE test2 FROM @test_quary;
SET @custid = 9;
EXECUTE test2 USING @custid;

SET @test_quary = 'SELECT customer_id, first_name, last_name FROM customer WHERE customer_id BETWEEN ? AND ?';
PREPARE test2 FROM @test_quary;
SET @lowest_custid = 9, @largest_custid = 15;
SET @largest_custid = 15;
SET @t = 20;
EXECUTE test2 USING @lowest_custid, @largest_custid;
EXECUTE test2 USING @largest_custid, @t;

    *** ?에 어떤 것이 들어올지는 USING에 적은 순서에 따라 달라진다
        >>> 첫 번째 ?엔 USING에서 맨 처음에 적은 변수, 두 번째 ?엔 그 다음에 적어놓은 변수, ...

    ex3. 테이블 조회 시 직접 SQL을 입력하는 대신 메타데이터 이용
    
SELECT
    concat(
        'SELECT ', 
        concat_ws(
            ', ', cols.col1, cols.col2, cols.col3, cols.col4, 
            cols.col5, cols.col6, cols.col7, cols.col8, cols.col9
        ),
        ' FROM customer WHERE customer_id = ?'
    )
INTO @search_customer_info
FROM (
    SELECT
        max(CASE WHEN ordinal_position = 1 THEN column_name ELSE NULL END) col1, 
        max(CASE WHEN ordinal_position = 2 THEN column_name ELSE NULL END) col2, 
        max(CASE WHEN ordinal_position = 3 THEN column_name ELSE NULL END) col3, 
        max(CASE WHEN ordinal_position = 4 THEN column_name ELSE NULL END) col4,
        max(CASE WHEN ordinal_position = 5 THEN column_name ELSE NULL END) col5, 
        max(CASE WHEN ordinal_position = 6 THEN column_name ELSE NULL END) col6, 
        max(CASE WHEN ordinal_position = 7 THEN column_name ELSE NULL END) col7, 
        max(CASE WHEN ordinal_position = 8 THEN column_name ELSE NULL END) col8, 
        max(CASE WHEN ordinal_position = 9 THEN column_name ELSE NULL END) col9
    FROM information_schema.columns
    WHERE table_schema = 'sakila' AND table_name = 'customer'
    GROUP BY table_name
) cols;

PREPARE dynsql3 FROM @search_customer_info;

SET @custid = 45;

EXECUTE dynsql3 USING @custid;



15장 실습

15.1 sakila 스키마에 존재하는 모든 인덱스를 나열하는 쿼리를 작성한다. 이 때, 테이블 이름도 결과에 포함한다
>>>
SELECT index_name, table_name
FROM information_schema.statistics
WHERE table_schema = 'sakila'
ORDER BY 1;

15.2 sakila.customer 테이블의 모든 인덱스를 만들 때 사용할 수 있는 출력을 생성하는 쿼리를 작성한다
    출력은 다음과 같도록 한다
    >>> ALTER TABLE 테이블이름 ADD INDEX 인덱스이름 (열 이름)

SELECT index_name
FROM information_schema.statistics
WHERE table_schema = 'sakila' AND table_name = 'customer'
ORDER BY 1;

SELECT 
    concat(
        '    ADD INDEX ',
        index_name,
        ' (', 
        column_name,
        ') '
    )
FROM information_schema.statistics
WHERE table_schema = 'sakila' AND table_name = 'customer';

SELECT 
    CASE 
        WHEN index_name != 'PRIMARY'
        THEN concat('    ADD INDEX ', index_name, '    (', column_name, ')    ' )
        ELSE ''
    END tst
FROM information_schema.statistics
WHERE table_schema = 'sakila' AND table_name = 'customer';

SELECT 
    'ALTER TABLE test_table'
UNION ALL
SELECT 
    CASE 
        WHEN index_name != 'PRIMARY'
        THEN concat('    ADD INDEX ', index_name, '    (', column_name, ')    ' )
        ELSE ''
    END tst
FROM information_schema.statistics
WHERE table_schema = 'sakila' AND table_name = 'customer';



교재 답안
WITH idx_info AS (
    SELECT
        s1.table_name, s1.index_name, 
        s1.column_name, s1.seq_in_index, (
            SELECT max(s2.seq_in_index)
            FROM information_schema.statistics s2
            WHERE
                s2.table_schema = 'sakila' 
                AND s2.table_name = 'customer'
                AND s2.index_name = s1.index_name
        ) num_columns
    FROM information_schema.statistics s1
    WHERE s1.table_schema = 'sakila' AND s1.table_name = 'customer'
) 
SELECT 
    concat(
        CASE
            WHEN seq_in_index = 1 
            THEN concat('ALTER TABLE ', table_name, ' ADD INDEX ', index_name, ' (', column_name)
            ELSE concat('    , ', column_name)
        END,
        CASE
            WHEN seq_in_index = num_columns 
            THEN ');'
            ELSE ''
        END
    ) index_creation_statement
FROM idx_info
ORDER BY index_name, seq_in_index;
            

    


























SELECT 
    column_name, data_type,
    character_maximum_length char_max_len,
    numeric_precision num_prcsn,
    numeric_scale num_scale
FROM information_schema.columns
WHERE table_schema = 'sakila' AND table_name = 'film'
ORDER BY ordinal_position;



SELECT index_name, non_unique, seq_in_index, column_name
FROM information_schema.statistics
WHERE table_schema = 'sakila' AND table_name = 'rental'
ORDER BY 1, 3;



SELECT constraint_name, table_name, constraint_type
FROM information_schema.table_constraints
WHERE table_schema = 'sakila'
ORDER BY 3, 1;



SELECT 'CREATE TABLE category (' create_table_statement
UNION ALL
SELECT cols.txt
FROM (
    SELECT concat('    ', column_name, '    ', column_type,
        CASE
            WHEN is_nullable = 'NO' THEN '    not null    '
            ELSE ''
        END,
        CASE
            WHEN extra IS NOT NULL AND extra LIKE 'DEFAULT_GENERATED%' 
                THEN concat('    DEFAULT    ', column_default, substr(extra, 18))
            WHEN extra IS  NOT NULL THEN concat('    ', extra)
            ELSE ''
        END,
        ', ') txt
    FROM information_schema.columns
    WHERE table_schema = 'sakila' AND table_name = 'category'
    ORDER BY ordinal_position
) cols
UNION ALL
SELECT ')';



SELECT 'CREATE TABLE category (' create_table_statement
UNION ALL
SELECT cols.txt
FROM (
    SELECT concat('    ', column_name, '    ', column_type,
        CASE
            WHEN is_nullable = 'NO' THEN '    not null    '
            ELSE ''
        END,
        CASE
            WHEN extra IS NOT NULL AND extra LIKE 'DEFAULT_GENERATED%' 
                THEN concat('    DEFAULT    ', column_default, substr(extra, 18))
            WHEN extra IS  NOT NULL THEN concat('    ', extra)
            ELSE ''
        END,
        ', ') txt
    FROM information_schema.columns
    WHERE table_schema = 'sakila' AND table_name = 'category'
    ORDER BY ordinal_position
) cols
UNION ALL
SELECT concat('    constraint primary key(')
FROM information_schema.table_constraints
WHERE table_schema = 'sakila' AND table_name = 'category' AND constraint_type = 'PRIMARY KEY'
UNION ALL
SELECT cols.txt
FROM (
    SELECT concat(
        CASE WHEN ordinal_position > 1 THEN '    , ' ELSE '    ' END, 
        column_name
    ) txt
    FROM information_schema.key_column_usage
    WHERE table_schema = 'sakila' AND table_name = 'category' AND constraint_name = 'PRIMARY'
    ORDER BY ordinal_position
) cols
UNION ALL
SELECT '    )'
UNION
SELECT ')';



SELECT tbl.table_name, 
    (
    SELECT count(*) FROM information_schema.columns clm
    WHERE clm.table_schema = tbl.table_schema AND clm.table_name = tbl.table_name
    ) num_columns, 
    (
    SELECT count(*) FROM information_schema.statistics sta
    WHERE sta.table_schema = tbl.table_schema AND sta.table_name = tbl.table_name
    ) num_indexes, 
    (
    SELECT count(*) FROM information_schema.table_constraints tc
    WHERE 
        tc.table_schema = tbl.table_schema
        AND tc.table_name = tbl.table_name
        AND tc.constraint_type = 'PRIMARY KEY'
    ) num_primary_keys
FROM information_schema.tables tbl
WHERE tbl.table_schema = 'sakila' AND tbl.table_type = 'BASE TABLE'
ORDER BY 1;



SET @qry = 'SELECT customer_id, first_name, last_name FROM customer';
PREPARE dynsql1 FROM @qry;
EXECUTE dynsql1;
DEALLOCATE PREPARE dynsql1;

SET @qry = '
    SELECT customer_id, first_name, last_name 
    FROM customer
    WHERE customer_id = ?
';
PREPARE dynsql2 FROM @qry;
SET @custid = 9;
EXECUTE dynsql2 USING @custid;

SET @custid = 145;
EXECUTE dynsql2 USING @custid;



SELECT concat(
    'SELECT    ',
    concat_ws(
        ', ', cols.col1, cols.col2, cols.col3, cols.col4,
        cols.col5, cols.col6, cols.col7, cols.col8, cols.col9
    ),
    '    FROM customer WHERE customer_id = ?'
) INTO @qry
FROM (
    SELECT 
        max(CASE WHEN ordinal_position = 1 THEN column_name ELSE NULL END) col1, 
        max(CASE WHEN ordinal_position = 2 THEN column_name ELSE NULL END) col2, 
        max(CASE WHEN ordinal_position = 3 THEN column_name ELSE NULL END) col3, 
        max(CASE WHEN ordinal_position = 4 THEN column_name ELSE NULL END) col4, 
        max(CASE WHEN ordinal_position = 5 THEN column_name ELSE NULL END) col5, 
        max(CASE WHEN ordinal_position = 6 THEN column_name ELSE NULL END) col6, 
        max(CASE WHEN ordinal_position = 7 THEN column_name ELSE NULL END) col7, 
        max(CASE WHEN ordinal_position = 8 THEN column_name ELSE NULL END) col8, 
        max(CASE WHEN ordinal_position = 9 THEN column_name ELSE NULL END) col9
    FROM information_schema.columns
    WHERE table_schema = 'sakila' AND table_name = 'customer'
    GROUP BY table_name
) cols;

SELECT @qry;

PREPARE dynsql3 FROM @qry;
SET @custid = 45;
EXECUTE dynsql3 USING @custid;
DEALLOCATE PREPARE dynsql3;



예제

15.1 샤키라 스키마의 모든 인덱스를 나열한다. 이 때 테이블 이름도 포함한다

SELECT index_name, table_name, column_name
FROM information_schema.statistics
WHERE table_schema = 'sakila'
ORDER BY 1, 2;



15.2
    sakila.customer 테이블의 모든 인덱스를 만들 때 사용할 수 있는 출력을 생성하는 쿼리를 작성한다.
    출력은 다음과 같이 되도록 한다
    >>> "ALTER TABLE <테이블이름> ADD INDEX <인덱스 이름> (열 목록)"

SELECT concat(
    'ALTER TABLE customer ADD INDEX '






















