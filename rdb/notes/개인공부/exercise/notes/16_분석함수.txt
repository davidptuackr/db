16장 분석함수

윈도우
    기본 형식
        SELECT ...
            값
                over ( 
                    partition by 윈도우 설정 기준
                    order by 정렬 기준 >>> 윈도우 정렬
                    [
                        rows unbounded preceding
                        rows between X preceding and Y following
                        range between interval X preceding and interval Y following
                    ]
                )

over() >>> 테이블 전체를 윈도우 범위로 설정

    rows unbounded preceding
        누적범위 >>> 처음부터 현재까지 
        ex. 누적합, 누적평균
    rows between X preceding and Y following
        롤링한 행 개수 단위로 지정 (ex. 주 단위로 했다면 (전주, 지금, 내주))
        단순히 개수를 기준으로만 판단한다 
            ex.
                GROUP BY year, month
                sum(revenue) over (order by year, month rows between 2 preceding) >>> 3개월 단위로 윈도우 설정
                    의도: 연속 3개월 단위 매출총계 계산
                    나올 수 있는 결과: (20년 12월, 21년 4월, 21년 5월) 매출 총합
                    
                사용 쿼리
SELECT
    year(payment_date),
    month(payment_date),
    sum(amount) 1m_rev_sum,
    sum(sum(amount)) over (
        order by year(payment_date), month(payment_date)
        rows between 2 preceding and 0 following
    ) cons_3m_rev_sum
FROM payment
GROUP BY year(payment_date), month(payment_date)
ORDER BY 1, 2;
        
    range between interval X preceding and interval Y following
        원본 행 개수 단위로 지정.
        범위 내 없는 값은 제외
            ex. 연속 7일 간의 매출총계 산출
SELECT
    date(payment_date),
    sum(amount) daily_rev_sum,
    sum(sum(amount)) over (
        order by date(payment_date)
        range between interval 7 day preceding and interval 0 day following
    ) cons_7day_rev_sum
FROM payment
GROUP BY date(payment_date)
ORDER BY 1;



순위
    순위 기능 별 동점 처리
        row_number(): 동점의 경우 행에 들어온 순서로 순위를 부여한다. 이 때 순위는 고유하며 절대 겹치지 않는다
        rank(): 동점일 경우 순위는 같지만 먼저 들어온 행이 먼저 표시되며, 동점 수만큼 순위를 건너뛴다 
            ex. (1, 2, 3, 3, 5, 5, 5, 8, ...)
        dense_rank(): rank()와 비슷하지만, 순위를 건너뛰지 않는다
            ex. (1, 2, 2, 3, 4, 4, 4, 4, 5, ...)
        
    ex. 월별 대여량을 기준으로 고객 별 순위 집계

SELECT 
    customer_id,
    monthname(rental_date) rental_month,
    count(*) num_rentals,
    rank() over (
        partition by monthname(rental_date)
        order by count(*) desc
    ) rank_rnk
FROM rental
GROUP BY customer_id, monthname(rental_date)
ORDER BY 2, 3 desc;

    ex. 위 쿼리를 변형하여 월별 상위 5명의 고객에 대한 정보 검색

WITH rank_by_month AS (
    SELECT
        customer_id,
        monthname(rental_date) rental_month,
        count(*) num_rentals,
        rank() over (
            partition by monthname(rental_date)
            order by count(*) desc
        ) rank_rnk
    FROM rental
    GROUP BY customer_id, monthname(rental_date)
)
SELECT customer_id, rental_month, num_rentals, rank_rnk
FROM rank_by_month
WHERE rank_rnk <= 5
ORDER BY rental_month, num_rentals desc, rank_rnk;

    *** 분석 함수는 SELECT 절에서만 사용할 수 있다 <<<



    ex. 월별 매출과 전체기간 매출 총계 산출
    여기서 grand_total은 전부 같은 값이다 >>> 별도 구간 지정이 없었기 때문

SELECT 
    monthname(payment_date) payment_month,
    amount,
    sum(amount) over (partition by monthname(payment_date)) monthly_total,
    sum(amount) over () grand_total
FROM payment
WHERE amount >= 10
ORDER BY 1;

    ex. grand_total을 이용해 전체 매출 중 해당 월이 차지하는 비율 산출
    
SELECT 
    monthname(payment_date) payment_month,
    sum(amount) month_total,
    round(
        sum(amount) / sum(sum(amount)) over () * 100,
        2
    ) pct_of_total
FROM payment
GROUP BY monthname(payment_date);

    ex. 해당 월의 매출이 전 기간 중 어느 정도 되는지 표현: 최저 매출은LOWEST, 최고 매출은 HIGHEST, 그 외엔 MIDDLE로 표현
    *** END desc라고 하면 desc를 SQL 구문으로 인식함 >>> 할거면 따옴표로 감쌀 것
    
SELECT 
    monthname(payment_date) payment_month,
    sum(amount) month_total,
    CASE sum(amount)
        WHEN max(sum(amount)) over () THEN 'HIGHEST'
        WHEN min(sum(amount)) over () THEN 'LOWEST'
        ELSE 'MIDDLE'
    END 'desc'
FROM payment
GROUP BY monthname(payment_date);
    


롤링

    ex. 주별 합계, 및 주단위 누적 합계 산출
    
SELECT
    yearweek(payment_date) payment_week,
    sum(amount) week_total,
    sum(sum(amount)) over (
        order by yearweek(payment_date) 
        rows unbounded preceding
    ) rolling_sum
FROM payment
GROUP BY yearweek(payment_date)
ORDER BY 1;

    ex. 직전 쿼리에서 주단위 누적 합계 대신 3주단위 평균 산출
        구현: (직전 행, 현재 행, 다음 행)의 평균
            맨 처음 행은 (현재 행, 다음 행)
            맨 마지막 행은 (직전 행, 마지막 행) 이용
        한계: 없는 주가 있다는 것은 고려하지 않았다 
            >>> 22주차의 경우 21~23주차 자료를 이용해야 하지만 21, 23, 24주차 자료를 이용해 계산했다
    
SELECT
    yearweek(payment_date) payment_week,
    sum(amount) week_total,
    avg(sum(amount)) 
        over (
            order by yearweek(payment_date) 
            rows between 1 preceding and 1 following
        ) rolling_3wk_avg
FROM payment
GROUP BY yearweek(payment_date)
ORDER BY 1;

    ex. 날짜 간격을 지정해서 계산
        이 때, 없는 날짜는 제외하고 계산 >>> 2005-08-16의 경우 13~15일이 없으므로 16~19일치 자료만 이용한다
    
SELECT
    date(payment_date),
    sum(amount),
    avg(sum(amount)) 
        over (
            order by date(payment_date)
            range between
                interval 3 day preceding 
                and interval 3 day following
        ) 7_day_avg
FROM payment
WHERE payment_date BETWEEN '2005-07-01' AND '2005-09-01'
GROUP BY date(payment_date)
ORDER BY 1;
        
        
        
쉬프팅: 지정 칸 수만큼 위 / 아래로 이동

    ex. 이전 행의 열 값, 다음 행의 열 값 검색: lag(), lead()
        결과
            prev_wk_tot: 직전 주의 매출총계. 첫 행은 null
            prev_wk_tot: 다음 주의 매출총계. 마지막 행은 null
        
        기본 골조
            lag / lead(값, 이동 단위, default(null treat)) over (윈도우)
            >>> lag, lead ~~~ shift in pandas
        
SELECT 
    yearweek(payment_date) payment_week,
    sum(amount) week_total,
    lag(sum(amount), 1) over (order by yearweek(payment_date)) prev_wk_tot,
    lead(sum(amount), 1) over (order by yearweek(payment_date)) next_wk_tot
FROM payment
GROUP BY yearweek(payment_date)
ORDER BY 1;

    *** null 방지를 하기 위해서 세 번째 인자 추가: null일 경우 0으로 처리
    
SELECT 
    yearweek(payment_date) payment_week,
    sum(amount) week_total,
    lag(sum(amount), 1, 0) over (order by yearweek(payment_date)) prev_wk_tot,
    lead(sum(amount), 1, 0) over (order by yearweek(payment_date)) next_wk_tot
FROM payment
GROUP BY yearweek(payment_date)
ORDER BY 1;

    ex. lag를 이용해 직전 주와의 매출 차이를 백분율로 환산
    
SELECT 
    yearweek(payment_date) payment_week,
    sum(amount) week_total,
    round(
        (
            sum(amount)
            - lag(sum(amount), 1) over (order by yearweek(payment_date))) 
            / lag(sum(amount), 1) over (order by yearweek(payment_date)
        ) * 100,
        1
    ) pct_diff
FROM payment
GROUP BY yearweek(payment_date)
ORDER BY 1;



group_concat

    ex. 출연진 수가 딱 3명인 영화 목록 생성
    
SELECT 
    f.title,
    group_concat(a.last_name order by a.last_name separator ', ') actors
FROM actor a
    INNER JOIN film_actor fa ON a.actor_id = fa.actor_id
    INNER JOIN film f ON fa.film_id = f.film_id
GROUP BY f.title
HAVING count(*) = 3;



WITH sales_fact AS (
SELECT 2019 year_no, 1 month_no, 19228 tot_sales UNION ALL
SELECT 2019 year_no, 2 month_no, 18554 tot_sales UNION ALL
SELECT 2019 year_no, 3 month_no, 17325 tot_sales UNION ALL
SELECT 2019 year_no, 4 month_no, 13221 tot_sales UNION ALL
SELECT 2019 year_no, 5 month_no, 9964 tot_sales UNION ALL
SELECT 2019 year_no, 6 month_no, 12658 tot_sales UNION ALL
SELECT 2019 year_no, 7 month_no, 14233 tot_sales UNION ALL
SELECT 2019 year_no, 8 month_no, 17342 tot_sales UNION ALL
SELECT 2019 year_no, 9 month_no, 16853 tot_sales UNION ALL
SELECT 2019 year_no, 10 month_no, 17121 tot_sales UNION ALL
SELECT 2019 year_no, 11 month_no, 19095 tot_sales UNION ALL
SELECT 2019 year_no, 12 month_no, 21436 tot_sales UNION ALL
SELECT 2020 year_no, 1 month_no, 20347 tot_sales UNION ALL
SELECT 2020 year_no, 2 month_no, 17434 tot_sales UNION ALL
SELECT 2020 year_no, 3 month_no, 16225 tot_sales UNION ALL
SELECT 2020 year_no, 4 month_no, 13853 tot_sales UNION ALL
SELECT 2020 year_no, 5 month_no, 14589 tot_sales UNION ALL
SELECT 2020 year_no, 6 month_no, 13248 tot_sales UNION ALL
SELECT 2020 year_no, 7 month_no, 8728 tot_sales UNION ALL
SELECT 2020 year_no, 8 month_no, 9378 tot_sales UNION ALL
SELECT 2020 year_no, 9 month_no, 11467 tot_sales UNION ALL
SELECT 2020 year_no, 10 month_no, 13842 tot_sales UNION ALL
SELECT 2020 year_no, 11 month_no, 15742 tot_sales UNION ALL
SELECT 2020 year_no, 12 month_no, 18636 tot_sales
)



16장 실습

16.1 
    sales_fact에서 모든 행을 검색하는 쿼리를 작성하고 tot_sales를 기준으로 순위 생성
    이 때 가장 높은 값은 1, 가장 낮은 값은 24가 돼야 한다

...
SELECT 
    year_no, 
    month_no,
    row_number() over (order by tot_sales desc) sales_rank
FROM sales_fact
ORDER BY sales_rank
;    

16.2 연도 별 월별 매출총계 순위 산출. 이 때 순위는 1 ~ 12까지

...
SELECT
    year_no, 
    month_no,
    row_number() over(
        partition by year_no
        order by tot_sales desc
    ) sales_rank
FROM sales_fact
ORDER BY 1, 3;

16.3 2020년도 자료에서 이전 달의 tot_sales 값을 포함하는 열이 있는 쿼리 작성

...
SELECT
    year_no,
    month_no,
    tot_sales,
    lag(tot_sales, 1) over (order by year_no) prev_month_total
FROM sales_fact
WHERE year_no = 2020;






























    05년도 분기별, 월별 매출 집계

SELECT
    quarter(payment_date) quarter,
    monthname(payment_date) month_nm,
    sum(amount) monthly_sales
FROM payment
WHERE year(payment_date) = 2005
GROUP BY quarter(payment_date), monthname(payment_date);

    위 쿼리에 전체 기간 중 최대 매출, 분기 별 최대 매출 산출

SELECT
    quarter(payment_date) quarter,
    monthname(payment_date) month_nm,
    sum(amount) monthly_sales,
    max(sum(amount)) over() max_overall_sales,
    max(sum(amount)) over(partition by quarter(payment_date)) max_qrtr_sales
FROM payment
WHERE year(payment_date) = 2005
GROUP BY quarter(payment_date), monthname(payment_date);



    월별 매출에 따라 순위 부여

SELECT 
    quarter(payment_date) quarter,
    monthname(payment_date) month_nm,
    sum(amount) monthly_sales,
    rank() over (order by sum(amount) desc) sales_rank
FROM payment
WHERE year(payment_date) = 2005
GROUP BY quarter(payment_date), monthname(payment_date)
ORDER BY 1, month(payment_date);

    각 월별 순위 대신 분기 내에서의 순위 산출

SELECT 
    quarter(payment_date) quarter,
    monthname(payment_date) month_nm,
    sum(amount) monthly_sales,
    rank() over (
        partition by quarter(payment_date)
        order by sum(amount) desc
    ) qtr_sales_rank
FROM payment
WHERE year(payment_date) = 2005
GROUP BY quarter(payment_date), monthname(payment_date)
ORDER BY 1, month(payment_date);



























