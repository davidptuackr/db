객체지향 데이터베이스

    객체지향 데이터 모델
        객체 & 객체 식별자: 현실 세계의 대상을 추상적으로 표현한 것 & 객체는 유일하게 구분하도록 하는 것
            객체? 개체?
                객체: 속성 + 메소드
                개체: 속성 + 관계?
        속성: 객체의 상태를 나타내는 값. 다중값, 객체 속성 가능
        메소드: 객체가 할 수 있는 연산. 메소드 접근 시 메시지 필요
        복합 객체: 객체 속성을 가진 객체 >>> 상속관계 아님. 객체의 일부분 (is part of 관계)
        
    객체지향 질의 모델
        객체지향 DB에선 질의 대상은 클래스, 결과는 객체 집합
        질의 대상이 하나의 클래스 & 그 하위 클래스면 단일 오퍼랜드 질의
        질의 대상이 여러 클래스면 다중 오퍼랜드 질의



객체 관계 데이터베이스
    객체지향 개념 + 관계 데이터 모델
    SQL 지원



분산 데이터베이스 시스템
    물리적으로 DB 분산 + 네트워크로 연결 >>> 논리적으론 중앙집중
    구성
        분산 처리기(지역 컴퓨터): 지역 DB 관리 + 운용. 분산DB를 위한 DBMS 보유
        분산DB: 쪼갠 DB. 지역에서 자주 쓰는 자료를 저장함 (ex. 주소가 그 동네인 회원목록)
        통신NW: 지역 간 연결 + 교류
        
    분산 목표
        분산 데이터 독립성: DB가 분산된 것을 사용자가 느끼지 못하도록 하는 것
        분산 투명성을 보장해야 독립성 실현 가능
        
        분산 투명성 상세
            위치 투명성
                분산된 위치를 알 필요 없이, 논리적인 이름만으로 데이터에 접근하도록 하는 것
                지역 DBMS의 시스템 카탈로그에 데이터 위치를 알아뒀다가, 외부 DB의 자료를 요청하면
                    1. 거기서 데이터를 갖고와 요청을 처리하거나
                    2. 요청을 그쪽으로 보내 결과만 갖고 오거나
                    3. 둘 다 한다.
                프로그램이 데이터 저장 위치까지 알아야 할 필요가 없어지기 때문에 프로그램 만들기가 수월해진다
                자주 쓰는 데이터는 근처에 있으므로 효율적이다
            
            중복 투명성
                데이터 전체 / 일부를 여러곳에 중복 저장하더라도, 한 곳에 저장한것처럼 사용하는 것
                장점: 가용성, 처리 효율 향상(가까이에 있으므로)
                단점: 용량, 일관성 저해 우려
            
            단편화 투명성
                릴레이션 하나를 튜플 / 속성 단위로 나눠서 저장하는 것
                중복의 장점 유지 + 단점 보완
                수평적 단편화: 튜플 단위로 쪼개기
                수직적 단편화: 속성 단위로 쪼개기 (떨어지더라도 PK는 붙어있어야 됨)
                혼합 단편화: 둘 다
                
            병행 투명성: 분산 DB의 트랜잭션 실행 결과에 대해 일관성을 보장하는 것
            장애 투명성: 문제 발생 시에도 서비스할 수 있도록 보장하는 것
        
    분산 DB의 구조
        전역 개념 스키마: 전체의 데이터 구조 + 제약조건. 만들 때 분산까진 고려하진 않음 (~ DB내 모든 릴레이션 스키마의 집합)
        단편화 스키마: 전역 개념 스키마를 나누는 방식 (단편화 정의) + ( 전역 - 조각 ) 간 대응관계
        할당 스키마: 각 조각 스키마의 인스턴스를 물리적인 저장 위치
        지역 스키마: 지역 별 데이터 구조 + 제약조건
        
    장점: 신뢰성, 가용성, 지역 자치성, 효율성, 확장성
    단점: 구축 / 관리 비용, 복잡한 관리 기법



멀티미디어 데이터베이스 시스템
    목적: 효율적인 멀티미디어 데이터 처리 (텍스트, 이미지, 음성 등)
    특징: 대용량, 검색 방법이 복잡함, 구조가 복잡함
    
    DB 별 멀티미디어 데이터 처리
        RDB
            멀티미디어 데이터 타입을 추가
            저장 / 검색만 가능. 그보다 복잡한 작업은 불가
            
        객체지향 DB
            멀티미디어 데이터를 객체, 클래스로 표현
            객체지향 개념 지원
            이것도 복잡한 모델링은 불가
        
    DBMS가 멀티미디어 데이터를 지원하는 방식
        DB없이 파일 시스템 이용: 파일 시스템 특징 그대로
        RDB
            텍스트는 RDB에, 이미지 / 비디오는 파일 시스템 이용
            데이터를 처리하려면 DB, 파일 시스템 처리 방식을 모두 갖춰야 함
            멀티미디어 데이터엔 DBMS 기능 사용 불가
            
        확장된 RDBMS
            RDBMS에 이진 대형 객체라는 타입을 추가한 DBMS
            DBMS 기능을 쓸 수는 있지만 완벽하지 않음
            SQL로 멀티미디어 데이터 처리 요청을 표현하기도 힘듦
        
        OODBMS
            멀티미디어 데이터에 객체지향 개념 지원 가능
            DBMS 고급 기능은 제공 불가 (동시성 제어, 회복 등)
            
    멀티미디어 데이터 질의
        데이터 자체에 대한 질의보다는
        데이터에 포함된 특정 객체, 메타데이터, 키워드를 이용한 질의를 주로 사용한다
        >>> 유형별 질의 형태도 다양하기에 멀티미디어 데이터 처리가 어려운 것
        
        질의 유형
            텍스트: 키워드를 포함하는 문서 질의
            이미지: 키워드와 관련되거나, 제시한 이미지와 유사한 이미지를 검색
            비디오: 장면을 대상으로 질의
            공간(~ 지도): 주어진 범위 조건에 맞는 특정 위치를 검색
            
        질의 처리
            매칭: 질의 조건과 데이터의 유사도를 계산하여, 유사도가 높은 데이터를 검색
            랭킹: 질의 조건과의 관련 정도에 따라 정렬한 뒤, 높은 연관 순으로 제공
            필터링: 관련성이 적은 데이터를 추려내가면서 검색
            인덱스: 인덱스 활용



기타 데이터베이스 응용 기술

    웹 데이터베이스
        웹 서비스의 특성과 DBMS의 데이터 관리 기능을 통합한 것
        웹 서비스 - DBMS 간 연결을 위한 미들웨어 필수
        
        미들웨어 구현 방법
            1. 서버 확장 방법: 미들웨어를 통해 DB에 접근하는 프로그램을 웹 서버 쪽에 두는 방법 <<< 주로 사용
            2. 클라이언트 확장 방법: 미들웨어를 통해 DB에 접근하는 프로그램을 클라이언트 쪽에 두는 방법

    데이터 웨어하우스
        ~ 쓰기 좋게 미리 가공 / 추출해둔 데이터 저장소
        DB의 일종
        일반 DB는 트랜잭션 처리 중심의 업무 + 최신 데이터 유지
        데이터 웨어하우스는 검색 위주의 업무 + 최신 & 과거 데이터 함께 유지
        목적: 의사 결정
        
        특징
            주제 지향적: 의사 결정에 필요한 주제 & 데이터만 유지
            통합된 내용: 여러 DB에서 추출한 데이터를 통합해 저장
            시간에 따라 변화: 현재와 과거 데이터를 함께 유지 >>> 동향 파악 + 관계 분석 + 의사 결정( 이 때 각 시점의 데이터는 스냅샷 )
            비소멸성: 검색을 위한 읽기 전용의 데이터 유지 >>> 설계 시 검색 효율이 우선 고려 대상
            



















