객체지향 데이터베이스

    객체지향 데이터 모델
        객체, 객체 식별자: 현실 세계의 대상을 추상적으로 표현한 것 + 객체는 유일하게 식별될 수 있게 식별자를 가짐
            객체? 개체?
                객체: 속성 + 메소드
                개체: 속성 + 관계?
        속성: 객체의 상태를 나타내는 값. 다중값, 객체 가능
        메소드: 객체가 할 수 있는 연산. 메소드 접근 시 메시지 필요
        상속: 단일, 다중 상속 가능 >>> 서브클래스는 1개 이상의 슈퍼클래스로부터 상속 가능
        복합 객체: 객체 속성을 가진 객체 >>> 상속관계 아님. 객체의 일부분 (is part of 관계)
        
    객체지향 질의 모델
        객체지향 DB에선 질의 대상은 클래스, 결과는 객체 집합
        질의 대상이 하나의 클래스 & 그 하위 클래스면 단일 오퍼랜드 질의
        질의 대상이 여러 클래스면 다중 오퍼랜드 질의



객체 관계 데이터베이스
    객체지향 개념 + 관계 데이터 모델
    SQL 지원



분산 데이터베이스 시스템
    물리적으로 DB를 분산시키고, 네트워크로 연결해 논리적으로 중앙집중처럼 구성한 DB 시스템
    구성
        분산 처리기(지역 컴퓨터): 지역 DB 관리 + 운용. 분산DB를 위한 DBMS 보유
        분산DB: 나눠둔 DB. 지역에서 자주 쓰는 자료를 저장함
        통신NW: 지역 간 연결 + 교류
        
    분산 데이터베이스 시스템의 주요 목표
        분산 데이터 독립성: DB가 분산된 것을 사용자가 느끼지 못하도록 하는 것
        분산 투명성을 보장해야 독립성 실현 가능
        
        분산 투명성 상세
            위치 투명성
                분산된 위치를 알 필요 없이, 논리적인 이름만으로 데이터에 접근하도록 하는 것
                시스템 카탈로그에서 데이터의 위치를 알아뒀다가, 외부 DB의 자료를 요청하면
                    1. 거기서 데이터를 갖고와 요청을 처리하거나
                    2. 요청을 그쪽으로 보내 결과만 갖고 오거나
                    3. 둘 다 한다.
                프로그램이 데이터 저장 위치까지 알아야 할 필요가 없어지기 때문에 프로그램 만들기가 수월해진다
                자주 쓰는 데이터는 근처에 있으므로 효율적이다
            
            중복 투명성
                데이터 전체 / 일부를 여러곳에 중복 저장하더라도, 한 곳에 저장한것처럼 사용하는 것
                장점: 가용성, 처리 효율 향상(가까이에 있으므로)
                단점: 용량, 일관성 저해 우려
            
            단편화 투명성
                릴레이션 하나를 튜플 / 속성 단위로 나눠서 저장하는 것
                중복의 장점 유지 + 단점 보완 
    


















