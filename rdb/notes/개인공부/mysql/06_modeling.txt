06장 데이터 모델링



데이터베이스 생명주기
    1. 요구사항 수집 및 분석
        사용자들의 요구사항을 듣고 분석하여 데이터베이스 구축의 범위를 정하는 단계
    2. 설계
        분석한 요구사항을 기초로 주요 개념과 업무 프로세스 등을 식별하고 (개념적 설계)
        이를 사용하는 DBMS에 맞게 변환(논리적 설계)한 후
        데이터베이스 스키마를 도출(물리적 설계)한다
    3. 구현
        설계 단계에서 생성한 스키마를 실제 DBMS에 적용하여 테이블 및 관련 객체(뷰, 인덱스 etc.)를 만든다
        이에 더해 관련 소프트웨어에 설계한 데이터베이스를 적용하여 서비스를 제공할 수 있도록 프로그램을 완성한다
    4. 운영
        완성한 소프트웨어(데이터베이스 + 프로그램)을 배포, 제공하는 단계
    5. 감시 및 개선
        유지 보수 단계

    전체 과정은 구축-사용-개선-재구축의 반복



모델링 과정
    1. 요구사항 수집 및 분석
    2. 설계
        2.1 개념적 모델링
        2.2 논리적 모델링
        2.3 물리적 모델링
    3. 구현

    요구사항 수집 및 분석 상세 방법
        - 실제 문서를 수집하고 분석한다
        - 담당자와의 인터뷰, 설문 조사를 통해 요구사항을 직접 수렴한다
            담당자 의도를 정확하게 파악하는 과정
        - 비슷한 업무를 처리하는 기존의 데이터베이스를 분석한다
            유사 사례 참고
        - 각 업무와 연관된 모든 부분을 살펴본다
        - 모호한 사항, 용어를 명확하고 구체적으로 정리한다
        - 분석 과정을 거쳐 필요로 하는 정보와 업무 처리 절차를 도출하여 다음 단계에서 활용할 수 있도록 한다

    개념적 모델링
        핵심 개체들, 이들 간의 관계, 속성을 추출해 ERD로 표현한다
        
    논리적 모델링
        ERD를 DBMS에 적합한 데이터 모델로 매핑한다
        상세 과정
            - 개념적 모델링에서 추출하지 않았던 상세 속성을 추출한다 >>> 추가로 추출하는 것
            - 정규화를 수행한다
            - 데이터 표준화를 수행한다: 데이터 용어 사전, 도메인 정의, 용어 정리 등
    
    물리적 모델링
        컴퓨터 저장 장치에 저장하기 위한 물리적 구조를 정의, 구현하는 과정
        테이블, 뷰, 인덱스 등을 데이터베이스에 직접 만드는 과정
        고려사항
            - 응답 시간을 최소화해야 한다
            - 얼마나 많은 트랜잭션을 동시에 발생시킬 수 있는지 검토해야 한다
            - 데이터가 저장될 공간을 효율적으로 배치해야 한다



ER model

    개념적 모델링에 사용하는 모델. created by Peter Chen, 1976
    사물을 개체와 개체 간의 관계로 표현한다
    개체는 독립적인 의미를 지니고 있는 유무형의 대상이다
    개체의 특성을 나타내는 속성으로 식별한다
    개념적 모델링 단계에서 사용하기 때문에 특정 데이터 모델이나 DBMS와 무관하게 설계할 수 있다
        >>> DBMS 독립적
    
    개체
        개체 집합: 공통된 속성을 가진 개체들의 모임 >>> ~ 인스턴스
        개체 타입: ~ 클래스, dtype
        
        요구사항 명세서에서 있는 명사가 주로 추출된다
        
        개체 특징
            - 유일한 식별자에 의해 식별이 가능하다
            - 꾸준한 관리를 필요로 하는 정보이다
            - 두 개 이상 영속적으로 존재한다
            - 업무 프로세스에 이용된다
            - 반드시 자신의 특징을 나타내는 속성을 포함한다
            - 다른 개체와 최소 한 개 이상의 관계를 맺고 있다
        
        ERD에서 직사각형으로 나타낸다
        
        개체 타입 구분
            개체 타입에는 강한 개체, 약한 개체가 있다.
            강한 개체
                - 단일 직사각형으로 표현한다
                - 다른 개체의 도움 없이 독자적으로 존재할 수 있다
            약한 개체
                - 이중 직사각형으로 표현한다
                - 독자 생존이 불가능하고 반드시 상위 개체 타입이 있어야 한다
                    ex. 계좌 개체는 소유주 개체가 있어야만 한다
                    
    속성
        개체가 가진 성질을 말한다
        ~ 필드, 프로퍼티, ...
        보통 타원으로 표현하며, 해당하는 개체와 실선으로 연결한다
        
        속성의 유형
            키 속성 VS 일반 속성
                키 속성: 개체 집합에서 각 개체를 유일하게 구분하는데 사용하는 속성, 이름 밑에 밑줄 추가 (주민번호, 롯트, ...)
                일반 속성: 그 외 속성
                
                *** 약한 개체는 키는 없고 식별자를 대신 가지며 이름 밑에 점선 밑줄을 추가한다
        
            단순 속성 VS 복합 속성
                단순 속성: 더 이상 쪼갤 수 없는 속성 (이름, 성별, ...)
                복합 속성: 독립적인 의미를 가진 속성으로 분해할 수 있는 속성, 속성 밑에 하위 속성 표시 (도서번호, 롯트 ... 너무 억지인가)
                
            단일값 속성 VS 다중값 속성
                단일값 속성: 하나의 값만 가지는 속성 (세대주, 세대번호)
                다중값 속성: 여러 값을 가지는 속성, 이중 타원으로 표현 (세대원, 단지번호)
                
                *** 단순 속성 == 단일값 속성?
                    주소의 경우 단일값이지만 복합 속성으로 볼 수 있기에 항상 성립은 안/된/다
                    
            저장 속성 VS 유도 속성
                저장 속성: 다른 속성의 영향 없이 단독으로 저장되는 속성
                유도 속성: 다른 속성을 이용해 유도한 / 계산한 속성, 점선 타원으로 표현
            
    
    
    관계
        개체 간의 연관성을 나타낸 것
        
        관계 타입: 개체 타입 간 연결 가능한 관계들. ~ 관계의 클래스
        관계 집합: 관계로 연결된 집합. ~ 관계의 인스턴스

        마름모로 표현한다
        속성을 가질 수 있다
        
        관계 타입의 유형
            차수에 따른 유형
                순환 관계(1진 관계): 개체 자기 자신과 맺는 관계
                이진 관계: 두 개체 사이에 맺은 관계
                삼진 관계: 세 개체 사이에 맺은 관계 (ex. 직원, 부품, 프로젝트 개체가 모여 업무를 '수행'한다)
                
            매핑 카디널리티에 따른 유형 (=대응 수에 따른 유형)
                일대일 관계: 개체 하나가 다른 개체 한 개에 대응 (직원 당 허가증은 하나씩만 발급)
                일대다 / 다대일 관계: 개체 하나가 다른 개체 여러 개에 대응 (대여자 한 명이 도서 여러 개를 대여 가능)
                다대다 관계: 개체 여러 개가 다른 개체 여러 개에 대응 (여러 사람이 여러 회사의 주식을 소유할 수 있음)
                
            
        
        




























