06장 데이터 모델링



데이터베이스 생명주기
    요구사항 수집 및 분석 >>> (스키마) 설계 >>> 구현 >>> 운영, 유지 보수
    *** 전체 과정은 구축-사용-개선-재구축의 반복



모델링 과정
    1. 요구사항 수집 및 분석
    2. 설계
        2.1 개념적 모델링
        2.2 논리적 모델링
        2.3 물리적 모델링
    3. 구현

    설계 상세
        개념적 모델링
            - 핵심 개체들, 이들 간의 관계, 속성을 추출해 ERD로 표현한다

        논리적 모델링
            - ERD를 DBMS에 적합한 데이터 모델로 매핑한다
            상세
                - 개념적 모델링에서 추출하지 않았던 상세 속성을 추출한다 >>> 추가로 추출하는 것
                - 정규화를 수행한다
                - 데이터 표준화를 수행한다: 메타데이터, 도메인 정의, 용어 정리 등

        물리적 모델링
            - 저장 장치에 저장하기 위한 테이블, 뷰, 인덱스를 정의, 구현한다
            - 이 때
                1. 응답 시간을 최소화해야 한다
                2. 동시에 생길 수 있는 트랜잭션 수를 따져야 한다
                3. 데이터가 저장될 공간을 효율적으로 배치해야 한다



ER model

    by Peter Chen, 1976
    사물을 개체, 관계로 표현하고 각 개체는 속성으로 식별한다
    ERM 작성은 DBMS 독립적이다
    
    개체
        독립적인 의미를 지니고 있는 유무형의 대상
            개체 집합: 공통된 속성을 가진 개체 모임 >>> ~ 인스턴스
            개체 타입: ~ 클래스, dtype
        요구사항에서 명사가 주로 추출된다
        
        핵심 특징
            - 유일한 식별자인 키 속성에 의해 식별이 가능하다
            - 자신의 특징을 나타내는 속성을 갖는다
            - 다른 개체와 하나 이상의 관계를 맺고 있다
        
        개체 타입 구분
            독자 생존 여부에 따른 분류
                - 강한 개체: 독자적으로 존재할 수 있으며 단일 직사각형으로 표현한다
                - 약한 개체: 독자 생존이 안되어 상위 개체 타입이 필요하며 이중 직사각형으로 표현한다 (ex. 계좌와 소유주 사이)
                    
    속성
        개체가 가진 성질.
        
        속성의 유형
            키 속성: 개체 집합에서 각 개체를 유일하게 구분하는데 사용하는 속성 (약한 개체는 키 대신 식별자를 가지며 점선 밑줄을 추가한다)
            
            단순 속성: 더 이상 쪼갤 수 없는 속성 (이름, 성별, ...)
            복합 속성: 독립적인 의미를 가진 속성으로 분해할 수 있는 속성, 속성 밑에 하위 속성 표시 (주소, mongodb _id)
            
            단일값 속성: 하나의 값만 가지는 속성 (세대주, 세대번호)
            다중값 속성: 여러 값을 가지는 속성, 이중 타원으로 표현 (세대원, 단지번호)
            
            저장 속성: 다른 속성의 영향 없이 단독으로 저장되는 속성
            유도 속성: 다른 속성을 이용해 유도한 / 계산한 속성, 점선 타원으로 표현 (ex. 주류 가격 = 출고가 + 세금)

            *** 단순 속성 == 단일값 속성?
                집주소의 경우 단일값이지만 복합 속성으로 볼 수 있기에 항상 성립은 안/된/다

    관계
        개체 간의 연관성을 나타낸 것
            관계 타입: 개체 타입 간 연결 가능한 관계들. ~ 관계의 클래스
            관계 집합: 관계로 연결된 집합. ~ 관계의 인스턴스
        
        관계 타입의 유형
            차수 기준
                순환 관계(1진 관계): 개체 자기 자신과 맺는 관계
                이진 관계: 두 개체 사이에 맺은 관계
                삼진 관계: 세 개체 사이에 맺은 관계 (ex. 직원, 부품, 프로젝트 개체가 모여 업무를 '수행'한다)
                
            매핑 카디널리티 기준 (=대응 수에 따른 유형)
                일대일 관계: ~ 직원 당 허가증은 하나씩만 발급
                일대다 / 다대일 관계: ~ 한 명이 도서 여러 개를 대여 가능
                다대다 관계: ~ 여러 사람이 여러 회사의 주식을 소유할 수 있음
                
            *** 대응 수 표기법
                        (min1, max1)  (min2, max2)
            1 : 1   : (0, 1)               (0, 1)
            1 : N  : (0, *)                (0, 1)
            M : N : (0, *)                (0, *)
            
                ex. 학과, 학생 개체 사이의 관계 '소속'의 경우
                    한 학과엔 0명 이상의 학생이 들어가므로 학과:1, 학생:N인 관계
                    대응 수는 학과 쪽에 (0, *), 학생 쪽에 (1, 1)을 써놓는다
                    즉 1 측에 (0, *), 다수 쪽에 (1, 1)을 적는다
                
            *** IS-A 관계
                상속 관계
                상위 개체 타입은 슈퍼클래스, 하위 개체 타입은 서브클래스라고 함
                역삼각형으로 표시하며 위에는 슈퍼클래스, 아래는 서브클래스를 실선으로 연결한다
                서브클래스는 슈퍼클래스에 있는 속성을 물려받으므로 더 적지 않는 대신 확장한 추가 속성만 기재한다
                
            참여 제약 조건
                전체 참여: 개체 집합 전체가 관계에 필참하는 경우로, 이중 실선으로 연결한다 (~ 계좌는 반드시 고객에 의해 소유된다)
                부분 참여: 개체 집합 일부만 선택 참여하는 경우로, 단일 실선으로 연결한다 (~ 고객은 가입만 하고 계좌가 없을 수 있다)
                
            역할
                관계를 표현할 때 각 개체들이 갖는 고유한 역할로 관계선 위에 적는다
                대부분 관계만 보면 알 수 있어 생략하고 애매할 때 적는다
                ex. 교수-학생 간 지도 관계에서 교수는 '지도한다', 학생은 '지도받는다'
        
        약한 개체
            약한 개체 집합에서 각 개체를 유일하게 구별하는 역할을 하는 속성을 식별자 / 부분키 라고 한다
            부분키는 상위 개체의 기본키와 결합해 사용한다
            *** 부분키 != 기본키
            
            관련 표기
                약한 개체 타입: 이중 직사각형
                약한 개체가 연결된 관계: 이중 마름모
                식별자: 점선 밑줄 친 속성
            
        IE 표기법 (aka crow feet)
            ERD 직사각형 + 새발 형태로 표현한 형태
            개체 타입과 속성은 직사각형으로 표현
            관계는 속성이 있다면 개체 타입과 똑같이 표현, 없으면 선으로 연결
            관계 대응 수는 새발로 표현
                점선: 비식별자 관계: 강한 개체 끼리의 관계
                실선: 식별자 관계: 약한 개체가 있는 관계
                새발: 일대다 관계
                O: 선택 참여. 즉 최소 참여가 0일 경우
                | : 필수 참여. 즉 최소 참여가 1인 경우 (>>>ERD의 이중 실선 연결)
                
                *** 여기서도 대응 수는 반대쪽 개체의 최대 참여를 나타낸다
                
                ex1. 부서 - 직원 간의 관계
                    - 부서, 직원은 모두 강한 개체이므로 점선 연결
                    - 부서엔 직원이 없을 수도 있으므로 직원 측 출발점에 O, |, 새발 표기
                    - 직원은 반드시 하나의 부서에 소속되므로 부서 측 출발점에 | 표기
                    
                ex2. 직원 - 부양가족 간의 관계
                    - 부양가족 존재 여부는 직원의 존재 여부에 따라 달라지므로 실선 연결
                    - 직원은 부양가족이 없을 수 있으므로 부양가족 측 출발점에 O, |, 새발 표기
                    - 부양가족은 반드시 한 직원의 가족이므로 직원 측 출발점에 | 표기
                    
                ex3. 고객 - 계좌 간의 관계
                    - 고객은 가입만하고 계좌는 없을 수 있으므로 실선 연결
                    - 고객은 0개 이상의 계좌를 가질 수 있으므로 계좌 측 출발점에 O, |, 새발 표기
                    - 한 계좌는 반드시 한 고객에 의해서만 소유될 수 있으므로 고객 측 출발점에 | 표기
                


ER 모델을 관계 데이터 모델로 사상

단계
    개체 사상
        1. 강한 개체 타입 사상
        2. 약한 개체 타입 사상
    관계 사상
        3. 이진 1:1 관계 사상
        4. 이진 일대다 관계 사상
        5. 이진 다대다 관계 사상
        6. N진 관계 사상
    속성 사상
        7. 다중값 속성 사상

개체 사상 과정 상세
    1. 강한 개체 타입
        각 개체 타입에 대응하는 릴레이션으로 만든다
        PK, FK는 별도 표기로 강조한다 (ex. PK는 밑줄 표현)
    
    2. 약한 개체 타입
        강한 개체와 마찬가지로 릴레이션화 한다
        이 때 강한 개체의 기본키와 자신의 식별자를 묶어 기본키로 한다
        유도 속성, 복합 속성 등은 속성의 성격에 맞게 적절하게 사상한다
    
관계 사상 과정 상세
    이진 관계는 다음과 같이 사상시킬 수 있다
        방법 1. 한 쪽 개체의 기본키를 외래키로 들여오는 식으로 표현
        방법 2. 두 개체를 하나의 릴레이션으로 합쳐서 표현
        방법 3. 관계를 아예 하나의 릴레이션으로 표현
        
    3. 이진 일대일 관계
        1~3 모두 가능하지만 그 중 FK에 NULL이 덜 나오는 방법이 권장된다
    
    4. 이진 일대다 관계
        N이 있는 쪽 개체에 1의 기본키를 외래키로 들여와 릴레이션을 구성한다 (N 반대 쪽 개체를 말하는 것이 아님)
    
    5. 이진 다대다 관계 & 6. N진 관계
        관계를 릴레이션으로 만들며 기본키는 각 개체의 기본키 조합으로 한다
        *** 이 때 만들어진 릴레이션을 교차 테이블이라고 한다
    
속성 사상 과정 상세
    7. 다중값 속성
        몇 개가 들어올지 모른다면: 릴레이션화. 이 때 기본키는 원래 개체의 기본키 X 값으로 정의
        몇 개가 들어올지 알고 그 수가 적다면: 각각 개체의 속성으로 사상


























