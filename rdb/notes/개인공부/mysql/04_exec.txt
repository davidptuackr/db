03 1 ~ 6 (추후 별도 확인)

SELECT * FROM book;

SELECT *, @RNUM := @RNUM + 1 AS rownum
FROM book, (SELECT @RNUM := 0) R
WHERE @RNUM < 5;

SELECT *, @RNUM := @RNUM + 1 AS rownum
FROM book, (SELECT @RNUM := 0) R
WHERE @RNUM <= 5
ORDER BY price;

SELECT *, @RNUM := @RNUM + 1 AS rownum
FROM
    (SELECT * FROM book ORDER BY price) b,
    (SELECT @RNUM := 0) R
WHERE @RNUM < 5;

SELECT *, @RNUM := @RNUM + 1 AS ROWNUM
FROM 
    (SELECT * FROM book WHERE @RNUM <= 5) b,
    (SELECT @RNUM := 0) R
ORDER BY price;

SELECT *, @RNUM := @RNUM + 1 AS ROWNUM
FROM 
    (SELECT * FROM book WHERE @RNUM <= 5 ORDER BY price) b,
    (SELECT @RNUM := 0) R;

SELECT *
FROM book, (SELECT @RNUM := 0) R;

SELECT *, @RNUM := @RNUM + 1 AS ROWNUM
FROM
    (SELECT * FROM book ORDER BY price) b,
    (SELECT @RNUM := 0) R
;




04 1 ~ 3
04.1
SELECT custid, (
    SELECT address
    FROM customer cs
    WHERE cs.custid = od.custid) address,
    SUM(saleprice) total
FROM orders od
GROUP BY od.custid;
>>>
    1. od.custid 기준으로 od 그룹화
    2. 그룹 키, 그룹 별 판매가 총합, 그룹 별 거주지 표시
    >>> 고객 별 판매가 총합, 고객아이디, 거주지 표시
    
04.2
SELECT cs.name, s
FROM (
    SELECT custid, AVG(saleprice) s
    FROM orders
    GROUP BY custid) od,
    customer cs
WHERE cs.custid = od.custid;
>>>
    od.custid, 그룹 별 saleprice 평균을 담은 파생 테이블 od와 cs 조인 후 고객명과 판매가 평균 표시
    >>> 고객 별 판매가 평균을 이름과 함께 표시

04.3
SELECT sum(saleprice) total
FROM orders od
WHERE EXISTS (
    SELECT *
    FROM customer cs
    WHERE custid <= 3 AND cs.custid = od.custid
);
>>>
    고객번호가 3 이하인 인원들의 판매가 총합 산출



05
뷰의 장점: 보안, 편의 +++ 독립성(프로그램이 뷰를 참조하도록 하여 원본이 변해도 프로그램에 영향을 주지 않도록 하는 것)
뷰의 단점: 수정 시 주의 필요

06 1 ~ 3
06.1
CREATE VIEW highorders
AS
SELECT b.bookid, bookname, name, publisher, saleprice
FROM orders o
    INNER JOIN customer c ON o.custid = c.custid
    INNER JOIN book b ON o.bookid = b.bookid
WHERE saleprice >= 20000;

06.2
SELECT bookname, name FROM highorders;

06.3
(X) >>> ALTER VIEW highorders DROP COLUMN saleprice;
(O) >>>
CREATE OR REPLACE VIEW highorders(bookid, bookname, name, publisher)
AS
SELECT b.bookid, bookname, name, publisher
FROM orders o
    INNER JOIN customer c ON o.custid = c.custid
    INNER JOIN book b ON o.bookid = b.bookid
WHERE saleprice >= 20000;

07 2, 3, 5
07.2.1: JOIN
SELECT ename, dname
FROM emp e INNER JOIN dept d ON e.deptno = d.deptno;

07.2.2: SCALAR SUBQUARY
SELECT ename, (
    SELECT dname
    FROM dept d
    WHERE d.deptno = e.deptno
) dept_name
FROM emp e;

07.3.1: JOIN
SELECT ename
FROM emp e INNER JOIN dept d ON e.deptno = d.deptno AND d.loc = 'CHICAGO';

07.3.2: INLINE VIEW
SELECT ename
FROM (
    SELECT ename, loc
    FROM emp e, dept d
    WHERE e.deptno = d.deptno
) IV
WHERE loc = 'CHICAGO';

07.3.3: NESTED QUARY
SELECT ename
FROM emp
WHERE deptno = (SELECT deptno FROM dept WHERE loc = 'CHICAGO');

07.3.4: EXISTS
SELECT ename
FROM emp e
WHERE EXISTS (SELECT 1 FROM dept d WHERE d.loc = 'CHICAGO' AND e.deptno = d.deptno);

07.5: DEPENDENT SUBQUARY
SELECT ename, sal, e.deptno, sal_avg
FROM (
        SELECT deptno, CEIL(AVG(sal)) sal_avg
        FROM emp e
        GROUP BY deptno
    ) avgs, emp e
WHERE e.deptno = avgs.deptno AND avgs.sal_avg < e.sal;



08 1 ~ 2
08.1
CREATE VIEW ti_mem(tname, mname)
AS
SELECT t.name, m.name
FROM reservation r
    INNER JOIN theaters t ON r.theater_id = t.theater_id
    INNER JOIN members m ON r.member_id = m.member_id
;

08.2
CREATE VIEW dh_cnts(res_date, cnt)
AS
SELECT res_date, COUNT(*)
FROM reservation
GROUP BY res_date;

10
DBMS 내 질의 처리기를 통해 질의 해석 및 최적화
해석 결과를 DBMS 내의 저장 데이터 관리자에게 전달
저장 데이터 관리자는 필요한 데이터에 접근할 수 있도록 OS에 요청
OS가 보조기억장치에 있는 데이터베이스로부터 요청받은 데이터를 찾아내 주기억장치에 적재 (여기서 디스크 뺑뺑이)

13 1 ~ 5
