06.5 modeling exec

Professor: ssn PK, name, age, rank, specialty
Dept: dno PK, dname, office
Graduate: ssn PK, name, age, deg_prog: [ 석사 / 박사 ]
Project: pid PK, sopnsor, start_date, end_date, budget

05: 학과마다 그 학과를 운영하는 교수(학과장)가 한 명씩 있다
    - Dept에 run 필드 추가
    - Professor의 PK를 run의 FK로 사용

06: 한 교수가 여러 학과에서 근무할 수 있는데 이 때 각 학가별로 참여백분율이 기록된다

07: 대학원생에게는 학위 과정을 밟을 전공학과가 하나씩 있다
    - Graduate에 major 필드 추가
    - Dept의 PK를 major의 FK로 사용

08: 대학원생에게는 조언해주는 선임대학원생이 있다
    - Graduate에 advisor 필드 추가
    - 순환 관계로 설정: Graduate의 PK를 advisor의 FK로 사용

09. 과제는 한 교수(연구책임자)에 의해 관리된다
    - Project에 manage 필드 추가
    - Professor의 PK를 manage의 FK로 사용한다

10: 과제는 한 명 이상의 교수(공동연구책임자)에 의해 수행된다

11: 한 과제는 한 명 이상의 대학원생(연구조교)에 의해 수행된다


중간
    1. 개체에 05, 07, 08, 09 반영
Professor: ssn PK, name, age, rank, specialty
Dept: dno PK, dname, office, run REF Professor.ssn
Graduate: ssn PK, name, age, deg_prog: [ 석사 / 박사 ], major REF Dept.dno, advisor REF Graduate.ssn
Project: pid PK, sopnsor, start_date, end_date, budget, manage REF Professor.ssn

    2. 06, 10, 11은 릴레이션화 고려



관계

근무(work_dept): ( 교수, 학과 ) 사이의 다대다 관계 ( 교수 M / 학과 N ), 양측 필참
전공(major): ( 학과, 대학원생 ) 사이의 일대다 관계 ( 학과 N, 대학원생 1 ), 대학원생 필참, 학과 선택참여
과제관리(manage): ( 과제, 교수 ) 사이의 일대일 관계, 과제 필참, 교수 선택참여
공동연구(work_in): ( 과제, 교수 ) 사이의 일대다 관계 ( 교수 N, 과제 1 ), 양측 선택 참여
과제참여(work_prog): ( 과제, 대학원생 ) 사이의 일대다 관계 ( 대학원생 N / 과제 1 ), 양측 필참
조언(advisor): 대학원생 개체 집합 사이의 일대다 관계, 양측 선택참여 ( 모든 학생이 조언자 역할을 하는 것도 아니고, 조언자를 요하지 않았을 수도 있음)

관계 특성
    모두 비식별자 관계



모델로의 사상
1, 2 생략

3. 이진 일대일 관계 사상: NULL이 가장 적게 나오는 방법으로 한다
    과제관리: 과제 개체에 교수의 기본키를 외래키로 들여온다 >>> 연구책임자(manage)라는 이름 부여

4. 이진 일대다 관계 사상: N측 개체에 1의 기본키를 외래키로 들여와 릴레이션을 구성한다 
    전공: 대학원생 개체에 학과의 기본키를 외래키로 들여온다 >>> 전공(major)이라는 이름 부여
    공동연구: 교수 개체에 과제의 기본키를 외래키로 들여온다 >>> 참여연구(workin)라는 이름 부여
    과제참여: 대학원생 개체에 과제의 기본키를 외래키로 들여온다 >>> 참여연구(work_prog)라는 이름 부여
    
    
5. 이진 다대다 관계 사상: 관계를 릴레이션으로 만들며 기본키는 각 개체의 기본키 조합으로 한다
    근무: 다음과 같이 별도 릴레이션화.
        근무: (학과번호, 교수아이디) PK, 참여백분율(pct_time)






06.7
직원: 직원번호 PK , 이름, 구내전화번호, 운전면허번호
주차공간: 일련번호 PK, 사용직원 FK REF 직원.직원번호, 주차장이름, 층수, 위치, 주차대수(유도)

주차대수
    주차장 별 해당 층수에 있는 주차 공간 수로 계산
    select count(*)
    from 주차공간
    group by 주차장이름, 층수



06.8

Customer / invoice: zero, one, many >>> 고객은 주문을 안할 수도 있다. 즉 고객 1, 주문 N인 관계
Product / invoice: zero, one, many >>> 주문이 없는 물건이 있을 수도 있다. 즉 제품 1, 주문 N인 관계

논리적 설계

    1. 개체 사상
고객: cust# PK, 이름, street, city, state, zip, phone
주문: invoice# PK, totaorderamt, date, terms, shipvia, 주문고객 FK REF 고객.ID, 품목번호 FK REF 제품.prod#
제품: prod# PK, standardprice, desc, sellprice, quantity
    
    2. 스키마 정의
고객
    cust# char(20) not null
    street, city, state, zip varchar not null
    name, phone varchar

    primary key: cust#

주문
    invoice# char(20) not null
    total_order_amt int not null
    date datetime not null
    terms, shipvia varchar
    주문고객 char not null
    품목번호 char not null
    
    primary key: invoice#
    foreign key
        주문고객 REF 고객.cust# on delete no action, on update cascade
        품목번호 REF 제품.prod# on delete no action, on update cascade

제품
    prod# char(20) not null
    desc varchar
    standard_price int not null
    sellprice int not null default standard_price * 1
    quantity int not null default 0
    
    primary key: prod#
        


06.9
조립
    부품, 업체, 자동차 간의 삼진 관계
    셋 다 선택 참여, 매핑 카디널리티 M:N
    >>> 릴레이션화
        1. 업체, 자동차, 부품의 PK / ID를 외래키 속성으로 포함
        2. 인조키 생성: 거래번호, INT AUTO INCREMENT

개체 사상: 릴레이션 정의
업체: 번호 PK, 이름, 도시, 국가
자동차: (번호 ID, 소유업체 FK REF 업체.번호) PK, 이름
부품: 번호 PK, 이름, 제작년도
납품내역: 거래번호 PK+AK, 롯트 FK REF 부품.번호, 거래처 FK REF 업체.번호, 사용모델 FK REF 자동차.번호
































