


01

01.1
SELECT bookname
FROM book
WHERE bookid = 1;

01.2
SELECT bookname
FROM book
WHERE price >= 20000;

01.3
SELECT SUM(o.saleprice)
FROM ordsomer c INNER JOIN orders o ON c.ordsid = o.ordsid
WHERE c.name = '박지성';

01.4
SELECT COUNT(*) '도서 수'
FROM ordsomer c INNER JOIN orders o ON c.ordsid = o.ordsid
WHERE c.name = '박지성';

01.5
SELECT COUNT(DISTINCT publisher)
FROM ordsomer c 
    INNER JOIN orders o ON o.ordsid = c.ordsid
    INNER JOIN book b ON o.bookid = b.bookid
WHERE c.name = '박지성';

01.6
SELECT 
    b.bookname,
    b.price,
    b.price - o.saleprice 'diff'
FROM ordsomer c 
    INNER JOIN orders o ON o.ordsid = c.ordsid
    INNER JOIN book b ON o.bookid = b.bookid
WHERE c.name = '박지성';

01.7
SELECT bookname
FROM book b
WHERE NOT EXISTS (
    SELECT 1
    FROM orders o
    WHERE 
        b.bookid = o.bookid
        AND ordsid = (SELECT ordsid FROM customer WHERE name = "박지성")
);



02

02.1
SELECT COUNT(*) FROM book;

02.2
SELECT COUNT(DISTINCT publisher) FROM book;

02.3
SELECT name, address FROM ordsomer;

02.4
SELECT orderid
FROM orders
WHERE 
    orderdate >= STR_TO_DATE("2014-07-04", "%Y-%m-%d")
    AND orderdate <= STR_TO_DATE("2014-07-07", "%Y-%m-%d")
;

SELECT orderid
FROM orders
WHERE orderdate BETWEEN "2014-07-04" AND "2014-07-07";

02.5
SELECT DISTINCT bookid
FROM orders
WHERE bookid NOT IN (
    SELECT bookid
    FROM orders
    WHERE orderdate BETWEEN "2014-07-04" AND "2014-07-07"
);

02.6
SELECT name, address FROM ordsomer WHERE name LIKE "김%";

02.7
SELECT name, address FROM ordsomer WHERE name LIKE "김%아";

02.8
SELECT name
FROM ordsomer c
WHERE NOT EXISTS ( SELECT 1 FROM orders o WHERE c.ordsid = o.ordsid );

SELECT name
FROM ordsomer
WHERE ordsid NOT IN ( SELECT ordsid FROM orders );

02.9
SELECT SUM(saleprice), AVG(saleprice) FROM orders;

02.10
SELECT 
    c.name, 
    CASE
        WHEN SUM(saleprice) IS NULL THEN 0
        ELSE SUM(saleprice)
    END net_sales
FROM ordsomer c LEFT OUTER JOIN orders o ON c.ordsid = o.ordsid
GROUP BY c.name;

02.11
SELECT c.name,
    CASE 
        WHEN b.bookname IS NULL THEN '-'
        ELSE b.bookname
    END order_mds
FROM ordsomer c
    LEFT OUTER JOIN orders o ON c.ordsid = o.ordsid
    LEFT OUTER JOIN book b ON b.bookid = o.bookid
;

02.12
SELECT *
FROM orders o
WHERE orderid = (
    SELECT orderid
    FROM orders o INNER JOIN book b ON o.bookid = b.bookid
    WHERE (b.price - o.saleprice) = (
        SELECT MAX(b.price - o.saleprice) diff
        FROM orders o INNER JOIN book b ON o.bookid = b.bookid
    )
);

02.13
SELECT name
FROM ordsomer
WHERE ordsid IN (
    SELECT ordsid
    FROM orders
    GROUP BY ordsid
    HAVING SUM(saleprice) > (
        SELECT AVG(saleprice)
        FROM orders
    )
);



03

03.1
SELECT DISTINCT c.name
FROM orders o INNER JOIN ordsomer c ON (o.ordsid = c.ordsid) AND (c.name != "박지성")
WHERE o.bookid IN (
    SELECT bookid
    FROM book 
    WHERE publisher IN (
        SELECT b.publisher
        FROM orders o 
            INNER JOIN ordsomer c ON (o.ordsid = c.ordsid) AND (c.name = "박지성")
            INNER JOIN book b ON (o.bookid = b.bookid)
    )
);

03.2
SELECT o.ordsid
FROM orders o INNER JOIN book b ON o.bookid = b.bookid
GROUP BY o.ordsid
HAVING COUNT(DISTINCT b.publisher) >= 2;

03.3
SELECT *
FROM book
WHERE bookid IN (
    SELECT bookid
    FROM orders
    GROUP BY bookid
    HAVING COUNT(bookid) / (SELECT COUNT(ordsid) FROM ordsomer)  > 0.3
);
 


04

04.1
INSERT INTO book VALUES("스포츠 세계", "대한미디어", 10000);
삽입 불가 >>> PK 필요

04.2
DELETE FROM book
WHERE publisher = "삼성당";

04.3
DELETE FROM book
WHERE publisher = "이상미디어";
삭제 불가 >>> orders에서 참조중이기 때문

04.4 
UPDATE book
SET publisher = "대한출판사"
WHERE publisher = "대한미디어";

04.5
CREATE TABLE bookcompany(
    name VARCHAR(20) NOT NULL,
    address VARCHAR(20),
    begin DATE,
    
    PRIMARY KEY(name)
);

04.6
ALTER TABLE bookcompany ADD  webaddress VARCHAR(30);

04.7
INSERT INTO bookcompany(name, address, begin, webaddress)
VALUES ('한빛아카데미', '서울시 마포구', '1993-01-01', 'https://hanbit.co.kr');



05

SELECT *
FROM ordsomer c1
WHERE NOT EXISTS (
    SELECT *
    FROM orders c2
    WHERE c1.ordsid = c2.ordsid
);

05.1
주문이 없는 고객에 대한 정보 표시

05.2
주문이 있는 고객에 대한 정보 표시



06

06.0
CREATE TABLE theaters (
    theater_id INTEGER NOT NULL AUTO_INCREMENT,
    name VARCHAR(20),
    loc VARCHAR(20),
    
    PRIMARY KEY(theater_id)
);

CREATE TABLE members (
    member_id INTEGER, 
    name VARCHAR(20),
    address VARCHAR(20),
    PRIMARY KEY(member_id)
);

CREATE TABLE screen (
    theater_id INTEGER,
    screen_id INTEGER,
    title VARCHAR(20),
    price INTEGER,
    seats INTEGER,
    
    PRIMARY KEY(theater_id, screen_id),
    FOREIGN KEY(theater_id) REFERENCES theaters(theater_id),
    CONSTRAINT screen_id_btw_1to10 CHECK (screen_id  BETWEEN 1 AND 10)
);

/* *** CONSTRAINT cond_name CHECK ... 할 때 CHECK 뒤에 괄호 필수 (ex. CHECK (a BETWEEN 1 AND 10)) */

CREATE TABLE reservation(
    theater_id INTEGER,
    screen_id INTEGER,
    member_id INTEGER,
    seat_no INTEGER,
    res_date DATE,
    
    PRIMARY KEY (theater_id, screen_id, member_id),
    FOREIGN KEY (theater_id, screen_id) REFERENCES screen(theater_id, screen_id),
    FOREIGN KEY (member_id) REFERENCES members(member_id),
    
    CONSTRAINT reservation_is_unique UNIQUE (theater_id, screen_id, member_id, seat_no)
);

/* *** 외래 키를 (theater_id, screen_id) 각자 설정하면 오류 발생 >>> screen의 PK 일부만 참조 불가능하기 때문? */

06.0.2.1
INSERT INTO theaters(name, loc) VALUES ("롯데", "잠실");
INSERT INTO theaters(name, loc) VALUES ("메가", "강남");
INSERT INTO theaters(name, loc) VALUES ("대한", "잠실");

06.0.2.2
INSERT INTO members VALUES(3, "홍길동", "강남");
INSERT INTO members VALUES(4, "김철", "잠실");
INSERT INTO members VALUES(9, "박영희", "강남");

06.0.2.3
INSERT INTO screen VALUES (1, 1, "어려운 영화", 15000, 48);
INSERT INTO screen VALUES (3, 1, "멋진 영화", 7500, 120);
INSERT INTO screen VALUES (3, 2, "재밌는 영화", 8000, 110);

06.0.2.4
INSERT INTO reservation VALUES(3, 2, 3, 15, '2014-09-01');
INSERT INTO reservation VALUES(3, 1, 4, 16, '2014-09-01');
INSERT INTO reservation VALUES(1, 1, 9, 48, '2014-09-01');

06.3.2
SELECT m.name
FROM members m
WHERE member_id IN (
    SELECT member_id
    FROM reservation
    WHERE theater_id = ( SELECT theater_id FROM theaters WHERE name = '대한')
);

06.4.2
SELECT *
FROM screen
WHERE theater_id IN ( SELECT theater_id FROM theaters WHERE loc = '잠실' );

06.4.3
SELECT theater_id, COUNT(*) / (SELECT COUNT(*) FROM reservation WHERE res_date = '2014-09-01') avg_visit_cnt
FROM reservation
WHERE res_date = '2014-09-01'
GROUP BY theater_id;

06.4.4
SELECT r.theater_id, r.screen_id, s.title
FROM reservation r INNER JOIN screen s ON r.theater_id = s.theater_id AND r.screen_id = s.screen_id
WHERE res_date = '2014-09-01'
GROUP BY r.theater_id, r.screen_id 
HAVING COUNT(*) = (
    SELECT MAX(visit_total)
    FROM ( SELECT COUNT(*) visit_total FROM reservation GROUP BY theater_id, screen_id ) dt
);



07.1
07.1.1
CREATE TABLE salesperson(
    name VARCHAR(20), 
    age INT,
    salary INT,
    CONSTRAINT PRIMARY KEY (name)
);

INSERT INTO salesperson VALUES ('David', 25, 1000);
INSERT INTO salesperson VALUES ('Paul', 30, 1500);
INSERT INTO salesperson VALUES ('Heywood', 27, 1322);
INSERT INTO salesperson VALUES ('Akira', 33, 2000);
INSERT INTO salesperson VALUES ('Shion', 41, 3333);

06.1.2
CREATE TABLE cust(
    name VARCHAR(20), 
    city VARCHAR(20),
    industrytype VARCHAR(20),
    CONSTRAINT PRIMARY KEY (name)
);

INSERT INTO cust VALUES ('Vercetti', 'VC', 'chemicals');
INSERT INTO cust VALUES ('CJ', 'Los Santos', 'logistics');
INSERT INTO cust VALUES ('Sora', 'Shinjuku', 'entertainment');
INSERT INTO cust VALUES ('Neru', 'Millennium', 'security');
INSERT INTO cust VALUES ('Midori', 'Millennium', 'IT');

CREATE TABLE ords(
    number INT,
    ordsname VARCHAR(20),
    salesperson VARCHAR(20),
    amount INT,
    
    PRIMARY KEY (ordsname, salesperson),
    FOREIGN KEY (ordsname) REFERENCES ords(name),
    FOREIGN KEY (salesperson) REFERENCES salesperson(name)
);

INSERT INTO ords VALUES (1, 'Sora', 'David', 10);
INSERT INTO ords VALUES (2, 'Midori', 'Shion', 3);
INSERT INTO ords VALUES (3, 'Neru', 'Heywood', 5);
INSERT INTO ords VALUES (4, 'CJ', 'TOM', 7);
INSERT INTO ords VALUES (5, 'CJ', 'David', 20);
INSERT INTO ords VALUES (6, 'Neru', 'Paul', 16);
INSERT INTO ords VALUES (7, 'Sora', 'David', 31);
INSERT INTO ords VALUES (8, 'Neru', 'David', 2);
INSERT INTO ords VALUES (9, 'CJ', 'Shion', 73);
INSERT INTO ords VALUES (10, 'Sora', 'Shion', 10);

07.4
SELECT name FROM cust WHERE city LIKE 'S%';

07.5
SELECT COUNT(*)
FROM cust c
WHERE EXISTS (
    SELECT 1
    FROM ords o
    WHERE c.name = o.custname
);

*** EXISTS는 >>> 상관 부속질의 <<<에 사용 가능하다

07.7
SELECT name, age
FROM salesperson s
WHERE EXISTS (
    SELECT 1
    FROM ords o
    WHERE o.salesperson = s.name AND EXISTS (
        SELECT 1
        FROM cust c
        WHERE c.city = 'LA' AND c.name = o.custname
    )
);

07.8
SELECT s.name, s.age
FROM salesperson s
    INNER JOIN ords o ON s.name = o.salesperson
    INNER JOIN cust c ON c.name = o.custname
WHERE c.city = 'LA';

07.10
UPDATE salesperson SET salary = 45000 WHERE name = 'TOM';



08

08.1
CREATE TABLE employee(
    empno INT AUTO_INCREMENT,
    name VARCHAR(20),
    phoneno VARCHAR(20),
    address VARCHAR(20),
    sex TINYINT,
    position TINYINT,
    deptno TINYINT,
    
    CONSTRAINT PRIMARY KEY(empno),
    CONSTRAINT chk_sex CHECK(sex IN (0, 1)),
    CONSTRAINT chk_position CHECK(position IN (0, 1, 2, 3)) /* 3이 팀장 */
);

CREATE TABLE department(
    deptno INT AUTO_INCREMENT,
    deptname VARCHAR(20),
    manager INT,
    
    CONSTRAINT PRIMARY KEY(deptno)
);

ALTER TABLE employee MODIFY deptno INT;
ALTER TABLE employee ADD FOREIGN KEY(deptno) REFERENCES department(deptno);

CREATE TABLE project (
    projno INT AUTO_INCREMENT,
    projname VARCHAR(20),
    deptno INT,
    
    CONSTRAINT PRIMARY KEY(projno)
);

CREATE TABLE works (
    empno INT,
    projno INT,
    hours_worked INT,
    
    CONSTRAINT PRIMARY KEY(empno, projno),
    FOREIGN KEY(empno) REFERENCES employee(empno),
    FOREIGN KEY(projno) REFERENCES project(projno)
);

08.5
SELECT name, address
FROM employee
WHERE deptno = (SELECT deptno FROM department WHERE deptname = 'IT');

08.6
SELECT COUNT(*)
FROM employee
WHERE deptno = (
    SELECT deptno
    FROM department 
    WHERE manager = (SELECT empno FROM employee WHERE name = 'gildong')
);



09

09.5
SELECT
    MAX(SAL) MAX,
    MIN(SAL) MIN,
    SUM(SAL) SUM,
    ROUND(AVG(SAL), 0) AVG
FROM emp;

09.6
SELECT
    JOB,
    COUNT(*) IN_JOB
FROM emp
GROUP BY JOB;

09.8
SELECT
    AVG(SAL) SAL_MEAN,
    SUM(SAL) SAL_SUM
FROM emp
WHERE DEPTNO = 30;

09.9
SELECT DEPTNO
FROM emp
GROUP BY DEPTNO
HAVING AVG(SAL) = (
    SELECT MAX(sal_means)
    FROM (SELECT AVG(SAL) sal_means FROM emp GROUP BY DEPTNO) sal_means_table
);

09.10
SELECT JOB FROM emp WHERE SAL >= 3000;

09.12

09.13

09.14

09.15

